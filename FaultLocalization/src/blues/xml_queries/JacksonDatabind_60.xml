<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_60" link="https://github.com/FasterXML/jackson-databind/issues/1385">
<buginformation>
<summary>polymorphic  type  lost  when  using</summary>
<description>edited when suppressing all getters but one with json ignore and choosing use byte array for serialization marking its getter with json value the typing the object changed which deserialized byte array would have expected verbose typing and usage the constructor marked with json creator that accepts the byte array construct the object deserialization the behavior expected when choosing more fields for serialization which redundant data this case running jackson databind java configuration the object mapper private final object mapper mapper public json filter this mapper new object mapper mapper configure serialization feature fail empty beans false mapper enable default typing serialization mapper write value string message deserialization mapper read value json remote call class getter and field serial private byte apdu json value public byte get bytes return apdu clone constructor json creator public command apdu json property value bytes byte apdu this apdu apdu clone parse log com ubitricity devices common pal command apdu creator serializes args akqea anw aaa net lipermi call remote instance instance 15098 49e 4328 072 5df 42799bd class name com ubitricity devices common tasks response receiver where args object array field the enclosing object the text was updated successfully but these errors were encountered copy link member cowtowncoder commented sep 2016 first things first actually seems like proper class signature from jvm perspective primitives have single letter type there jdk visible external class and array indicator that part may fine itself but bigger question whether polymorphic typing can work with json value the problem that type information during serialization should refer command apdu which the logical type even physical serialization byte that sense class included seems wrong see can reproduce with given information copy link member cowtowncoder commented sep 2016 hmmh see the underlying problem with delegation type must written for original type but serialize use and value should return value json value annotated method this almost certainly requires some internal hope api changes which means not backportable fix cowtowncoder added the label sep 2016 copy link member cowtowncoder commented sep 2016 one minor change code should json creator public command apdu byte apdu this apdu apdu clone parse log com ubitricity devices common pal command apdu creator that ensure delegating creator not property one that not the main problem but once serialization works this what would prevent deser also looks like can actually fix this for and new api needed cowtowncoder removed the label sep 2016 cowtowncoder changed the title typing lost when using json value polymorphic type lost when using json value sep 2016 cowtowncoder added this the milestone sep 2016 cowtowncoder closed this 114a sep 2016 copy link author tom markuske commented sep 2016 thanks for looking into greatly appreciated cowtowncoder mentioned this issue oct 2016 jackson ignores type information when raw return type big decimal big integer 466 closed copy link onderson commented jun 2017 either fix 1385 466 causes problem camel 11308 downgrade jackson dependency resolves the issue could you check this cross reference sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.ser.std.JsonValueSerializer</file>
</fixedfiles>
</bug>
</bugrepository>
