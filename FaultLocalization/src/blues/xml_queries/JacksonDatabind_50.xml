<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_50" link="https://github.com/FasterXML/jackson-databind/issues/1261">
<buginformation>
<summary>deserialization  fails  with  combination  forward  references</summary>
<description>follow bug 1255 the patch provided exposes related deserialization problems have attached small project jackson test zip demonstrate these issues when run with both patches from 1255 the output provided the attached both txt when run with just the first patch from 1255 the output provided the attached first txt important points when the object expressed contained within collection map list this example deserialization works correctly when field object deserialization broken this particular example doesn have forward references but does have cycles nevertheless have seen situations where non cyclical forward references also not deserialize properly with the same caveat jackson test zip both txt first txt the text was updated successfully but these errors were encountered arifogel mentioned this issue jun 2016 json identity info incorrectly serializing forward references 1255 closed copy link contributor author arifogel commented jun 2016 attached new version the test project that also includes forward references you can see that problem the same for the cyclical reference the parent and for the forward reference jackson test zip forward both txt forward first txt copy link jannispl commented jun 2016 edited think experiencing similar issue regarding deserialization and cyclic references during deserialization jackson attempts resolve some fields like the class field wrong object wrong scope the scope before this results exceptions like unexpected token end object expected field name missing property class that contain type but also unrecognized field very hard explain and visualize arifogel you think this relevant the original issue copy link contributor author arifogel commented jun 2016 edited what happens that when unresolved reference encountered unresolved forward reference thrown you look the code this only caught properly collection deserializer and map deserializer does not appear handled correctly bean deserializer what happens that when unresolved reference encountered field bean exception gets thrown that goes down the stack until map deserializer collection deserializer catch block encountered there such deserializer the stack then the error message that eventually gets output correct message about unresolved forward reference however gets caught map deserializer collection deserializer then all hell breaks loose deserialization continues the bean fields json but the deserializer thinks map collection down the stack then nonsensical error messages get output about how the next field after the unresolved forward reference not compatible with the value type the map collection being deserialized attempted fix this adding catch block bean deserializer the 2nd patch provided discussion bug 1255 but while stops the crashes the resulting deserialized objects can still have incorrect values the case forward cyclical references noted this bug description edit jannispl this explanation consistent with your observations copy link member cowtowncoder commented jun 2016 lack catching for beans particularly puzzling since that the main use case going back the original 388 and issue 351 they were missing from release notes for reason added think that bean property handling should included via object reference property and question would why this isn triggered test cases will try see what tests uncover copy link member cowtowncoder commented jun 2016 edited hmmh tests use creators constructors that typically something that does not mix very well with object ids that bit warning sign but would explain why could yet not working case copy link contributor author arifogel commented jun 2016 yes unfortunately cannot avoid using creators use case without very significant rewrites data model effectively blocked this bug work please let know there anything else can help copy link contributor author arifogel commented jun 2016 and should comment that the creators don seem problem when the field wrapped list the test cases provided hoping won too hard generalize what has been done for objects maps and collections beans copy link member cowtowncoder commented jun 2016 looks like failure that see value when handle value called some ways looks like initialization might missing this could good sign fundamental theoretical problem with creators that not all cycles can ever resolved refers and refers directly indirectly then only one references can passed via creator although hope many cases can supported there are some hard limits keep mind another thing keep mind this even when using json creator also possible use setters for example all non reference properties can passed via creator and references then passed via setter directly assigned field hybrid schemes are possible think will try see locally modifying properties use setters fields would make specific test pass that gives some information where problems reside copy link contributor author arifogel commented jun 2016 but why does this case work properly for the parent list property but not the parent property this suggests that are not dealing with fundamental theoretical limitation here but implementation problem jun 2016 tatu saloranta notifications github com wrote looks like failure that see value when handle value called some ways looks like initialization might missing this could good sign fundamental theoretical problem with creators that not all cycles can ever resolved refers and refers directly indirectly then only one references can passed via creator although hope many cases can supported there are some hard limits keep mind another thing keep mind this even when using json creator also possible use setters for example all non reference properties can passed via creator and references then passed via setter directly assigned field hybrid schemes are possible think will try see locally modifying properties use setters fields would make specific test pass that gives some information where problems reside you are receiving this because you were mentioned reply this email directly view git hub 1261 comment mute the thread https github com notifications unsubscribe ahys enei tgguy vlo icg 2ks 4aga ivk copy link member cowtowncoder commented jun 2016 arifogel agree but did want mention eventual challenge trying use creators for object references make sure limitations are not surprise copy link contributor author arifogel commented jun 2016 what discipline you recommend exactly should json creator still set every field should reference fields always non final and have corresponding setter and that irrelevant when using json creator how exactly does one instantiate the hybrid approach jun 2016 tatu saloranta notifications github com wrote arifogel https github com arifogel agree but did want mention eventual challenge trying use creators for object references make sure limitations are not surprise you are receiving this because you were mentioned reply this email directly view git hub 1261 comment mute the thread https github com notifications unsubscribe ahys aespj 89w vukhgd lks 3ga ivk copy link member cowtowncoder commented jun 2016 arifogel would suggest using fields setters for reference properties except that collection map values appear safe per your comments and creator for everything else nice thing about using fields that possible keep them private protected resolving issues with creator passed references looks like test case passes only fields setters are used for what that worth did not try anything fancier just simple replacement next step reintroduce failure and see why expected handling passed possible that this could related other known issues with creator property handling worked hope that would both good and bad good that would get resolved along with other work bad that know that work involved sizable and requires rewrite property discovery and resolution copy link member cowtowncoder commented jun 2016 arifogel actually suspect the example case indeed impossible either general even with straight java with the jackson deserialization works more that below note that setup code itself does not pass child favorite child for constructor parent can instead test calls setter for that this needed break the cycle what object model needs the same here remove favorite child property from constructor and leave setter with that modification test passes locally for jackson limitations when dealing with creators all parameters must resolvable when matching json object complete unlike with setter field injection where deferral object resolution possible with catching exception can not done with creators because they can only called once and further creator must called create the instance for collections this different they are not created using creator but simple arguments constructor and elements may added afterwards would possible force failure custom creator creator taking all elements array collection argument was used test does not and don think common usage pattern think this explains difference you saw wrt collection map case compared poj with creator try think better exception throw however current message not useful all cowtowncoder added commit that referenced this issue jun 2016 add failing test for 1261 see what issues remains minor improv loading status checks 1fb ements error reporting copy link contributor author arifogel commented jun 2016 thanks don think need set references constructors main project least now know how modify code avoid this problem jun 2016 tatu saloranta notifications github com wrote arifogel https github com arifogel actually suspect the example case indeed impossible either general even with straight java with the jackson deserialization works more that below note that setup code itself does not pass child favorite child for constructor parent can instead test calls setter for that this needed break the cycle what object model needs the same here remove favorite child property from constructor and leave setter with that modification test passes locally for jackson limitations when dealing with creators all parameters must resolvable when matching json object complete unlike with setter field injection where deferral object resolution possible with catching exception can not done with creators because they can only called once and further creator must called create the instance for collections this different they are not created using creator but simple arguments constructor and elements may added afterwards would possible force failure custom creator creator taking all elements array collection argument was used test does not and don think common usage pattern think this explains difference you saw wrt collection map case compared poj with creator try think better exception throw however current message not useful all you are receiving this because you were mentioned reply this email directly view git hub 1261 comment mute the thread https github com notifications unsubscribe ahys 55t ihduk 0rks mga ivk copy link member cowtowncoder commented jun 2016 arifogel right wanted make sure there work around believe there still something off with handling hope play with the setup added modified version failing test one with creators used for everything copy link contributor author arifogel commented jun 2016 edited implemented the workaround code but still ran into similar problem the one for which produced the second patch 1255 the problem more less the same unresolved references for non creator properties are properly lazily resolved when they are value collection map but not when they are the non creator property itself the latter case the exception caught too far below the parser continues chomping away the remaining properties the bean with the unresolved reference while the deserializer thinks least one level from said bean see the new attached patch follow later with modified small example patch txt edit this time did more comprehensive check see that most complex objects are serialized identically both initially and after deserializing and reserializing copy link contributor author arifogel commented jun 2016 edited further reflection think may make sense combine this patch with the 2nd one from 1255 with one modification the handle resolved forward reference function from the 2nd patch from 1255 the version bean referring that deals with creator properties should check see the value null and throw exception stating that there cycle final creator fields among objects clear the purpose both these patches fix handling unresolved forward references objects that are direct bean properties that they are correctly handled the same way values collections and maps edit your comment jackson limitations when dealing with creators all parameters must resolvable when matching json object complete unlike with setter field injection where deferral object resolution possible with catching exception can not done with creators because they can only called once and further creator must called create the instance for collections this different they are not created using creator but simple arguments constructor and elements may added afterwards would possible force failure custom creator creator taking all elements array collection argument was used test does not and don think common usage pattern think this explains difference you saw wrt collection map case compared poj with creator applies creator properties even when there are cycles then never mind about using the 2nd patch from 1255 copy link contributor author arifogel commented jun 2016 hmm having trouble reproducing problem with small example better wait this copy link contributor author arifogel commented jun 2016 cowtowncoder figured out project was taking different code path than the example you modified had json creator functions that took multitude non reference fields that were not being output initially because they were null valued and had json include include non null set then when they were being deserialized since not all creator properties were present bean deserializer deserialize using property based never thought that were done with creator properties such non creator reference properties were deserialized using buffer buffer property prop deserialize with error wrapping ctxt prop the same function this call did not have proper handling for unresolved forward references unlike the deserialize call after the comment just clean fix was modify code not have creator properties that could null valued basically the patch provided this issue added that handling the later code path should note that someone constructs json hand with non creator reference properties appearing before creator properties this problem may still pop don think reasonable that field ordering the json should impact execution fact the current serialization code ugly because refuses put fields strictly alphabetical order but rather puts creator properties first assume prevent this problem still think patch something similar should applied since appears enable arbitrary field ordering now that know what caused the problem can also provide you with smaller example when have some more free time copy link contributor author arifogel commented jun 2016 here small example demonstrating the error note that simply adding json ignore child get parent you can avert the crash jackson test zip unmodified txt with json ignore getparent txt copy link contributor author arifogel commented jun 2016 edited almost forgot mention when you apply patch then you get the output with json ignore getparent txt even without adding the json ignore annotation this indicates that this inconsistency between handling unresolved forward references beans maps and collections edit mean you get the correct output for everything when you apply the patch copy link member cowtowncoder commented jun 2016 arifogel thanks agree that ordering should not matter serialization order mostly optimization not related correctness deserialization but helps common case deserializer can avoid possibly costly buffering just does not count main concern with original patch was just that adding second place for handling should not done cover other problems good know why initial handling for bean properties was not working guess still don fully understand that but hope looking through examples helps think pgelinas implemented original handling see might have suggestions well copy link member cowtowncoder commented jun 2016 updated tests there seems some problem with type resolution that array child instances somehow not recognized such perhaps token buffering incorrectly handled regardless there something wrong there can see failure cowtowncoder added commit that referenced this issue jun 2016 improve test for 1261 loading status checks 13bbbb cowtowncoder changed the title json identity info broken deserialization involving forward references and cycles json identity info deserialization fails with combination forward references json creator jun 2016 cowtowncoder added this the milestone jun 2016 cowtowncoder closed this 567d jun 2016 copy link member cowtowncoder commented jun 2016 arifogel after reading through the latest patch nice and small and does fix the issue thank you very much for going through the code and figuring out the solution this problem goes bit hesitant try backport 0def mentioned this issue jul 2017 allow optional object for json identity info 1698 open sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.deser.BeanDeserializer</file>
</fixedfiles>
</bug>
</bugrepository>
