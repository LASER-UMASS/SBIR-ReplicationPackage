<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_52" link="https://github.com/FasterXML/jackson-databind/issues/999">
<buginformation>
<summary>external  property  not  deserialized</summary>
<description>think easier show the code than explain the issue prepared test project https github com crew 4ok jackson databind test basically the issue that the external property which another property type deduced after deserialization null see the failing test https github com crew 4ok jackson databind test blob master src test java jackson external deser test java missing something the text was updated successfully but these errors were encountered copy link member cowtowncoder commented nov 2015 the problem that default jackson considers type information metadata which not exposed serializer deserializer but handled itself this simplifies handling for most cases but you want type exposed you can add property visible true json type info and should get deserialized another potential problem with code the use generic root value with type parameter but not using type reference java type erasure will mean that type only known message wrapper jackson there runtime generic type information available jvm does not have that which may cause issues instead class would better use something like mapper read value source new type reference message wrapper chat message which would pass paramaterization copy link author oleksandr oksenenko commented nov 2015 want message type field explicitly defined the class because potentially the message can serialized not only jackson unfortunately neither adding visible true nor explicit type information helped message type still null edit added your proposed fixes the repo the link the commit oleksandr oksenenko jackson databind test 61dda copy link member cowtowncoder commented nov 2015 odd visible should perhaps there issue with external opposed other type inclusion mechanism copy link member cowtowncoder commented nov 2015 actually suspect the problem may with use constructor opposed field setter test case should help figure out what going you could try removing use constructor just see whether that the issue copy link author oleksandr oksenenko commented nov 2015 cowtowncoder yep using setters instead constructor did the trick however seems that external properties should usable with constructors too shouldn they bug copy link member cowtowncoder commented nov 2015 crew 4ok ideally yes that should work can considered bug although concern that could also become implementation imposed limit constraint flaw this point think the challenge technically that use constructors complicated compared using setters fields object due additional buffering instead being able recursively deserialize values one one often necessary buffer everything that passed via constructor until actual type found know what construct how use external ids itself complicated process when type found from different place than where would sort naturally belong and also requiring buffering and even polymorphic type handling tricky since handling deserialization goes from base type subtype locating handlers and forth yes looks like bug but not something that necessarily simple resolve copy link author oleksandr oksenenko commented nov 2015 cowtowncoder see things are complicated and should not rely soon resolution the bug anyway thanks for the clarifying the issue bit copy link cspurk commented jan 2016 was just about file the same issue fwiw have created self contained test class which may bit easier play with than oleksandr oksenenko test project import java exception import java util objects import com fasterxml jackson annotation json creator import com fasterxml jackson annotation json property import com fasterxml jackson annotation json sub types import com fasterxml jackson annotation json type info import com fasterxml jackson annotation json type name import com fasterxml jackson core type type reference import com fasterxml jackson databind object mapper public class jackson test public static interface payload json type name foo public static class foo payload implements payload json type name bar public static class bar payload implements payload public static class message extends payload private final string type json type info visible true use json type info name include json type info external property property type json sub types json sub types type foo payload class json sub types type bar payload class private final payload json creator public message json property type string type json property payload payload objects require non null type this fails since type null objects require non null payload this type type this payload payload getters omitted here public static void main string args throws exception object mapper object mapper new object mapper message msg object mapper read value type foo payload new type reference message foo payload copy link member cowtowncoder commented jan 2016 cspurk thank you for the test just make sure does this fail with just older versions copy link cspurk commented jan 2016 cowtowncoder yes fails with too cowtowncoder added commit that referenced this issue jan 2016 add unit test for 999 loading status checks 036fe copy link member cowtowncoder commented jan 2016 added the failing unit test should help eventually resolve the issue aryehpro added commit aryehpro jackson databind that referenced this issue jan 2016 merge branch master https github com faster xml jackson databind 3520 tatu saloranta 113 and others via tatu saloranta master https github com faster xml jackson databind 124 commits minor addition related faster xml 1087 resolve context type assuming type bindings from that are expected work add unit test for faster xml 999 minor warnings cleanup add javadoc badge with automatic version detection fix faster xml 1083 add failing test for faster xml 1083 add unit test verify that object works via atomic reference too minor javadoc improvement wrt faster xml 1076 making simple type construct class deprecated was not yet for some reason should have been fix faster xml 1078 fix faster xml 1079 maven release plugin prepare for next development iteration maven release plugin prepare release jackson databind prepare for final fix faster xml 1073 try reproduce faster xml 1074 javadoc trimming try reproduce faster xml 825 again still passes minor improvement ensure base encoding uses configured setting undo part change done for string deserializer caused issues with xml handling further minor cleanups cleanup cowtowncoder mentioned this issue jun 2016 external property never gets deserialized 1271 closed cowtowncoder closed this 20f jun 2016 cowtowncoder modified the milestones jun 2016 copy link member cowtowncoder commented jun 2016 finally found time dig deep enough and figure out why things were failing how fix fix unfortunately involved enough that can backport but plus side should released end june 2016 that this weekend next week rocketraman mentioned this issue aug 2016 external property polymorphic deserialization does not work with enums 1328 closed deepak 0405 mentioned this issue jun 2020 case external property the type set null 2772 closed sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.deser.BeanDeserializerBase</file>
<file>com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler</file>
</fixedfiles>
</bug>
</bugrepository>
