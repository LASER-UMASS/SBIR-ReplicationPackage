<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_1" link="https://github.com/FasterXML/jackson-databind/issues/223">
<buginformation>
<summary>null  values  are  duplicated  when  serializing  array  via json format  shape json format  shape  array</summary>
<description>example public class test outer json format shape json format shape array public array list test inner array public test outer this array new array list test inner this array add new test inner one this array add new test inner null private class test inner public int public string may null public test inner int string this this may null serializing instance test outer will produce the following incorrect result jackson array one null null where the null value duplicated the expected result would array one null tracked the issue down package com fasterxml jackson databind ser public class bean property writer public void serialize column object bean json generator jgen serializer provider prov throws exception object value get bean value null nulls need specialized handling null serializer null null serializer serialize null jgen prov else can not suppress entries tabular output jgen write null otherwise find serializer use json serializer object ser serializer where suspect there missing return exit the function once handling the null value the dedicated branch done now null value first serialized the dedicated branch jgen write null and then execution continues the normal non null path and eventually the value serialized once again the text was updated successfully but these errors were encountered copy link member cowtowncoder commented may 2013 good catch thank you for doing the detective work this does indeed sound like the root cause will fix for also very interested getting more feedback for serialize array relatively new feature and not well tested more mature ones are although thought there was test for checking this part apparently not good test but think there potential benefits for size reduction performance improvements mean when works fully cowtowncoder closed this 88f 44d may 2013 copy link author lukegh commented may 2013 thank you for the very quick reply and fix watching http wiki fasterxml com jackson release 222 for the release date yes the serialize array feature very useful for reducing size when dealing with hundreds thousands records data and having the serialization array done jackson conjunction with responsebody spring mvc allows the odel part the server side clear and easy maintain need resort actual array arrays with generic values just keep hierarchy objects with typed properties actually use the opportunity request improvement for the serialize array feature the way are using this feature conjunction with meta data array holding the names the columns the data array like array cols may null data one null this allows the json response self contained and the client side code more robust currently ensure consistency the generated json output would use json property order the inner test class conjunction with just hard coded matching cols array from this standpoint ideally the serialize array feature would incorporate the meta data array allowing specify the json format shape json format shape array annotation perhaps optional meta data array name well actually there would two additional optional properties for shape array one for the meta data array and one for the data array like json format shape json format shape array meta data array cols data array data public array list test inner array which would generate the json array cols may null data one null thanks for listening and thanks again for the quick fix looking forward release copy link member cowtowncoder commented may 2013 you are welcome wrt fix glad know feature has proven useful far column names metadata something people have been doing for while anyway supporting that would require quite bit work little bit for annotation since json format generic annotation this would need more thought since should not something only applicable pojo array case but bit more abstraction but mostly with serializers deserializers and since would need coordinate handling all kinds json list structures arrays collections with poj big undertaking jackson designed maximized modularity and serializers only interact via small set interfaces wrt including type identity information and such cross cutting concerns but then again easier see simplifications when actually working implementing something could you file this separate request however this way can mark particular bug fixed and new entry would track this improvement idea copy link author lukegh commented may 2013 thanks for the reply suspected would not trivial support such enhancement suspect fact that starting actually work implementing something like this would uncover more complications rather than simplifications also this extended serialization format easily obtainable using existing functionality would really just nice have filed this enhancement request separately item 229 thanks sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.ser.BeanPropertyWriter</file>
</fixedfiles>
</bug>
</bugrepository>
