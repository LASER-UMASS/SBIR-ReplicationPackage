<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonCore_10" link="https://github.com/FasterXML/jackson-core/issues/207">
<buginformation>
<summary>array index out bounds exception  com  fasterxml  jackson  core  sym byte quads canonicalizer</summary>
<description>the following code demonstrates bug jackson core version the hash table implementation com fasterxml jackson core sym byte quads canonicalizer from quick glance looks the primary hash information area hash area has spillover area that not accounted for properly the string array names import com fasterxml jackson core json factory import com fasterxml jackson core sym byte quads canonicalizer import com fasterxml jackson databind object mapper import org testng annotations test import java lang reflect field import java lang reflect method import java nio charset standard charsets import java util map simple test case for demonstrating bug class link byte quads canonicalizer some cases possible work around this bug disabling the link json factory feature canonicalize field names feature that case link com fasterxml jackson core json byte source json bootstrapper construct parser int com fasterxml jackson core object codec byte quads canonicalizer com fasterxml jackson core sym chars name canonicalizer int creates link com fasterxml jackson core json reader based json parser instead link com fasterxml jackson core json utf stream json parser public class utf byte stream test private static final int seed 523743345 private static void inject reproducible seed object mapper object mapper throws exception json factory json factory object mapper get factory workaround uncomment the following line json factory disable json factory feature canonicalize field names field byte symbol canonicalizer field json factory class get declared field byte symbol canonicalizer byte symbol canonicalizer field set accessible true method factory method byte quads canonicalizer class get declared method create root int class factory method set accessible true byte symbol canonicalizer field set json factory factory method invoke null seed test public void test read throws exception object mapper object mapper new object mapper inject reproducible seed object mapper string builder string builder new string builder string builder append string builder append expected cper position null for int string builder append append append null string builder append object mapper read value string builder string get bytes standard charsets utf map class the text was updated successfully but these errors were encountered copy link member cowtowncoder commented jul 2015 thank you for reporting this surprising that the problem can reproduced this easily cowtowncoder added commit that referenced this issue jul 2015 add the failing test for 207 loading status checks 71a 00e copy link member cowtowncoder commented aug 2015 looks like this degenerate case with very unusual number collisions but that also seems strange given that straight sequence number strings copy link member cowtowncoder commented aug 2015 the real bug was check see where the end spillover area was assuming hash array end but this not correct optional area exists for long names but also changed short name hash shuffling slightly produce better distribution test case had spill rate which way too high with changes much more modest spillover rate and also slightly improves hashing wrt existing tests cowtowncoder added this the milestone aug 2015 cowtowncoder closed this 2823b aug 2015 copy link contributor tlrx commented sep 2015 also hit this exception with caused java lang array index out bounds exception 512 com fasterxml jackson core sym byte quads canonicalizer add name byte quads canonicalizer java 822 com fasterxml jackson core json utf stream json parser add name utf stream json parser java 2340 com fasterxml jackson core json utf stream json parser find name utf stream json parser java 2185 com fasterxml jackson core json utf stream json parser parse name utf stream json parser java 1691 com fasterxml jackson core json utf stream json parser next token utf stream json parser java 740 org elasticsearch common xcontent json json content parser next token json content parser java have test that basically creates strings like this test test test 200 test and the test just parses each string using json factory create parser the test always fail but set json factory disable json factory feature canonicalize field names the test succeed copy link pwebbitrs commented sep 2015 have the same issue for this quite critical problem done bit analysis this may not complete but here anyway the byte quad canonicalizer has flag called needs rehash which determines when they need size the internal names array prior adding the offending string via add name needs rehash false size the names 128 full clearly does require rehash add name this point the fix kicks and sets need rehash true however the end this method have this names offset name this count this verify need for rehash return name verify need for rehash only serves flip the rehash flag and even did too late because the array accesor here blows first line code above this all occurs before actual rehash can performed hence the blow nothing prevents the exception from occuring certainly not this code path anyway hope this helps copy link contributor tlrx commented sep 2015 pwebbitrs came similar conclusion also tested with snapshot with forcing rehash call the verify sharing and also works tlrx mentioned this issue sep 2015 update jackson elastic elasticsearch 13344 merged cowtowncoder modified the milestones sep 2015 copy link member cowtowncoder commented sep 2015 apologies for slow response was vacation for past weeks just came back now tlrx thank you for reporting this would possible share your test code seems like fix was incomplete and would like verify the new fix copy link member cowtowncoder commented sep 2015 tlrx don doubt the problem exists but unfortunately can not reproduce this with test described above there probably just some minor variation usage will try modify the test end but help would appreciated copy link contributor tlrx commented sep 2015 cowtowncoder thanks for your response apologize wasn able provide test reproduce the issue the failing test test merge mapper tests test concurrent merge test bit complex uses concurrency compression and custom wrappers around core jackson parsers making difficult reproduce simple test try again remove custom code and reproduce using jackson classes only the meanwhile happy test new fix that can help copy link contributor tlrx commented sep 2015 cowtowncoder with little more love managed reproduce the issue created dedicated java project with jackson core jar lib and the class package com company import com fasterxml jackson core json factory import com fasterxml jackson core json generator import com fasterxml jackson core json parser import com fasterxml jackson core json token import java byte array input stream import java exception public class main public static void main string args throws exception json factory json factory new json factory json factory configure json parser feature allow unquoted field names true json factory configure json generator feature quote field names true json factory configure json parser feature allow comments true json factory configure json factory feature fail symbol hash overflow false this trips many mappings now field names canonicalization must disabled with jackson see https github com faster xml jackson core issues 207 json factory configure json factory feature canonicalize field names false system out println using jackson version json factory version for int 200 final string content integer string test byte array input stream new byte array input stream content get bytes utf try json parser parser json factory create parser try json token token parser next token token json token start object throw new illegal state exception malformed content token parser next token token json token field name throw new illegal state exception malformed content finally parser close finally close system out println test fails with oracle jdk with the stacktrace using jackson version exception thread main java lang array index out bounds exception 512 com fasterxml jackson core sym byte quads canonicalizer add name byte quads canonicalizer java 822 com fasterxml jackson core json utf stream json parser add name utf stream json parser java 2340 com fasterxml jackson core json utf stream json parser find name utf stream json parser java 2185 com fasterxml jackson core json utf stream json parser parse name utf stream json parser java 1686 com fasterxml jackson core json utf stream json parser next token utf stream json parser java 740 com company main main main java sun reflect native method accessor impl invoke native method sun reflect native method accessor impl invoke native method accessor impl java sun reflect delegating method accessor impl invoke delegating method accessor impl java java lang reflect method invoke method java 483 com intellij execution application app main main app main java 140 when the same code included unit test jackson core project master branch works cowtowncoder mentioned this issue sep 2015 array index out bounds exception 128 when repeatedly serializing byte array 216 closed copy link member cowtowncoder commented sep 2015 thanks suspect 216 dup will mark the fix under copy link member cowtowncoder commented sep 2015 tlrx able reproduce this with given test cowtowncoder added commit that referenced this issue sep 2015 add failing test for 216 and 207 7ca breml mentioned this issue dec 2015 array index out bounds exception com fasterxml jackson core sym byte quads canonicalizer guyboertje jrjackson closed sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer</file>
</fixedfiles>
</bug>
</bugrepository>
