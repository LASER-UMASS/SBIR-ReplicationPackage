<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_23" link="https://github.com/FasterXML/jackson-databind/issues/849">
<buginformation>
<summary>possible  problem  with  exclusion</summary>
<description>from faster xml jackson module afterburner appears like default handling might not work expected with whereas afterburner does seem handle things better need investigate and also see works better the text was updated successfully but these errors were encountered copy link member author cowtowncoder commented jun 2015 yes looks like empty checking does work for strings but not for numbers cowtowncoder closed this 6172d jul 2015 cowtowncoder added this the milestone jul 2015 copy link joerg commented sep 2015 although this closed issue comment here provide the context can you please motivate why zero number considered empty this just caused production bug our side after update zero can perfectly valid value business context but because this change got filtered out now changed the json include option always this fixes the issue but does not feel like proper solution are there any alternatives handle situation where zero valid but want filter out other empty values like empty string copy link member author cowtowncoder commented sep 2015 joerg first all apologies for breakage did not anticipate this lead issues since absence value such default values should used anyway for numbers the default value for int for example the original intent non empty definition includes empty collections strings and primitives with default values numbers boolean value false but not all serializers implemented these rules originally intended note too that there nothing invalid empty empty collections may perfectly valid well the main use for non empty reduce size json objects removing what are thought unnecessary entries ones for which default value for objects null for primitives java default collections and arrays are sort outliers actually work around note that you can annotate both classes give default inclusion for its properties and individual properties overrides this may make most sense short term for longer term there plan also allow use custom inclusion definition since impossible come with short list criteria that would work for all users copy link sovietaced commented sep 2015 will hold off updating our pom wrt jackson until the longer term solution available copy link talawahtech commented sep 2015 just got hit this well also seems counter intuitive treat zero valued ints and doubles empty furthermore based tests zero valued double object not primitive also treated empty which very perplexing since double doesn have default value other than null you serialize double whose value using json include include non empty the value will disappear entirely serialized form and then when you attempt deserialize the output the deserialized value will null also consider corner case where the field string but the getter returns double private string risk score public double get risk score return double parse double risk score using the default serialization pre version jackson string value would serialized json number and then deserialized back the original string without issue however now the double thrown away during serialization and then after serialization you end with null string all for making things more flexible with custom inclusion definition but these new defaults discarding ints and doubles definitely don seem intuitive feel like could lead lot head scratching and trigger bugs that don show right away copy link member author cowtowncoder commented sep 2015 this point think the best course for would see possible make non default work that would take current behavior empty with wide applicability and revert non empty only include null like non null empty string length map size collection size and arrays length while understand that the change non intuitive many due missing handling earlier versions behavior what for and not want risk further confusion variation within patch levels will file new issue with reference this one since this issue for original fix for missing handling and partial revert needs separate change also contains related change non default per above cowtowncoder mentioned this issue sep 2015 revert non empty handling primitive numbers wrt non empty make non default use extended criteria 952 closed copy link member author cowtowncoder commented sep 2015 per above created 952 track work for copy link knightweb commented dec 2015 cowtowncoder think this issue has considered critical bug ideally version would come out with fix reverting the previous behaviour non empty think the fundemental concept non empty has been misunderstood non emtpy just not concept that applies real primitives they always have default value with auto unboxing imperitive not apply non empty the boxed versions version prior cope with this correctly below fully runnable example hopefully illustrating the seriousness this change also included some additional fields that show why simply removing the non empty serialisation option not the solution you can keep the same payload structure between version and package com testcomp import java util array list import java util list import com fasterxml jackson annotation json include include import com fasterxml jackson databind object mapper public class primitive handling issue public static class integer issue public integer issue private list string shouldnt serialise private string also shouldnt serialise private integer must serialise public integer get must serialise return must serialise public void set must serialise integer must serialise this must serialise must serialise public list string get shouldnt serialise return shouldnt serialise public void set shouldnt serialise list string shouldnt serialise this shouldnt serialise shouldnt serialise public string get also shouldnt serialise return also shouldnt serialise public void set also shouldnt serialise string also shouldnt serialise this also shouldnt serialise also shouldnt serialise run this test both version and see the behaviour difference param args throws exception public static void main string args throws exception object mapper mapper new object mapper comment the line below see the behaviour this field across version and see how behaves correctly fundemental error has been made non empty not concept that can apply real primitives they always have default and you can tell whether they where set the default not mapper set serialization inclusion include non empty primitive handling issue integer issue phi before new primitive handling issue integer issue phi before set must serialise phi before set shouldnt serialise new array list string string mapper write value string phi before system out println primitive handling issue integer issue phi after mapper read value primitive handling issue integer issue class here the now unavoidable null pointer caused this bug system out println phi after get must serialise currently struggle upgrade from version can find version that doesn have some form bug odd feature trying upgrade get the json type info existing property but have far hit major reasons not use unfortunately version are also unusable they not allow multiple named types refering the same subclass something fixed version would possible have patch for this issues too many other issues major changes with the moment conisder making that leap copy link member author cowtowncoder commented dec 2015 knightweb unfortunately that the behavior for and will not changed this point there are multiple patch versions and this point there would more confusion here than seems worth one potential possibility would patch for anyone has time backport fix for allowing multiple named types could release micro patch for that don have time investigate that myself copy link knightweb commented dec 2015 yes perhaps backporting that json type info fix would the best solution there are other blockers upgrade for take look the code small enough could perhaps apply aspect guessing couldn contribute just now see version has fix for this issue but longer supports java when deserializing assume this intentional and move jdk will mandatory for anyone upgrading jackson core copy link member author cowtowncoder commented dec 2015 knightweb thank you for your help here and sorry for the combination blockers unfortunate that your use case happens touch these disparate items making upgrade much more difficult than should sort half way version core components jackson annotations and jackson core should still only require java whereas others will require java but even with that java should only needed build jackson components other than annotations streaming java runtime should enough use jackson databind and most other modules exceptions are modules for datatypes not included java like java datetime jsr 310 that require java hppc java language constructs are yet used they will used java datatypes supported jackson databind are all dynamically loaded and should downgrade gracefully there just new value type and annotation types bit unclean from maven perspective but the intent for still run java but include java support dynamically copy link crumbpicker commented feb 2016 have updated jackson dependency and still have issue with the serialization zero values when using the json include include non empty config property could you please notify here from which version jackson the behavior version has been restored thanks copy link member author cowtowncoder commented feb 2016 crumbpicker see 952 for full discussion for short explanation this the expected behavior for and will not changed patch releases has been reverted back crumbpicker mentioned this issue feb 2016 support jackson databind faster xml jackson module scala 233 closed copy link knightweb commented feb 2016 cowtowncoder forgot all about this once got past issue took your advice and backported the feature needed into version listed the modified class below incase that helps anyone else less likely its quite niche issue its simply merge that class with the version package com fasterxml jackson databind jsontype impl import java util array list import java util collection import java util hash map import java util hash set import java util linked hash map import java util linked hash set import java util map import java util set import com fasterxml jackson databind annotation introspector import com fasterxml jackson databind java type import com fasterxml jackson databind cfg mapper config import com fasterxml jackson databind introspect annotated class import com fasterxml jackson databind introspect annotated member import com fasterxml jackson databind jsontype named type import com fasterxml jackson databind jsontype subtype resolver public class std subtype resolver extends subtype resolver implements java serializable private static final long serial version uid protected linked hash set named type registered subtypes public std subtype resolver subtype registration override public void register subtypes named type types registered subtypes null registered subtypes new linked hash set named type for named type type types registered subtypes add type override public void register subtypes class classes named type types new named type classes length for int len classes length len types new named type classes register subtypes types resolution class deserialization private collection named type collect and resolve subtypes type mapper config config annotated member property java type base type final annotation introspector config get annotation introspector class raw base base type null property get raw type base type get raw class need keep track classes that have been handled already set class types handled new hash set class map string named type name new linked hash map string named type start with lowest precedence which from type hierarchy named type root type new named type raw base null annotated class annotated class construct without super types raw base config collect and resolve type root type config types handled name then with definitions from property collection named type find subtypes property null for named type annotated class construct without super types get type config collect and resolve type config types handled name and finally explicit type registrations highest precedence registered subtypes null for named type subtype registered subtypes subtype root type raw base assignable from subtype get type yes annotated class curr annotated class construct without super types subtype get type config collect and resolve type curr subtype config types handled name return combine named and unnamed types handled name private collection named type collect and resolve subtypes type mapper config config annotated class type set class types handled new hash set class map string named type name new linked hash map string named type named type root type new named type type get raw type null collect and resolve type type root type config types handled name registered subtypes null class raw base type get raw type for named type subtype registered subtypes subtype root type raw base assignable from subtype get type yes final annotation introspector config get annotation introspector annotated class curr annotated class construct without super types subtype get type config collect and resolve type curr subtype config types handled name return combine named and unnamed types handled name deprecated method overrides override public collection named type collect and resolve subtypes annotated member property mapper config config annotation introspector java type base type return collect and resolve subtypes type config property base type override public collection named type collect and resolve subtypes annotated class type mapper config config annotation introspector return collect and resolve subtypes type config type internal methods method called find subtypes for specific type class using type class the unique key case conflicts protected void collect and resolve annotated class annotated type named type named type mapper config config annotation introspector hash map named type named type collected subtypes named type has name string name find type name annotated type name null named type new named type named type get type name first things first base type itself included collected subtypes contains key named type recursion however may need update name named type has name named type prev collected subtypes get named type prev has name collected subtypes put named type named type return wasn add and check subtypes recursively collected subtypes put named type named type collection named type find subtypes annotated type null empty for named type subtype annotated class subtype class annotated class construct without super types subtype get type config collect and resolve subtype class subtype config collected subtypes method called find subtypes for specific type class using type the unique key case conflicts protected void collect and resolve type annotated class annotated type named type named type mapper config config set class types handled map string named type name final annotation introspector config get annotation introspector named type has name string name find type name annotated type name null named type new named type named type get type name named type has name name put named type get name named type only check subtypes this type hadn yet been handled types handled add named type get type collection named type find subtypes annotated type null empty for named type subtype annotated class subtype class annotated class construct without super types subtype get type config collect and resolve type subtype class subtype config types handled name helper method used for merging explicitly named types and handled classes without explicit names protected collection named type combine named and unnamed set class types handled map string named type name array list named type result new array list named type name values will figure out which classes have explicitly assigned name removing classes from set and for remaining classes add anonymous marker for named type name values types handled remove get type for class cls types handled result add new named type cls return result copy link derekm commented feb 2016 knightweb other words jackson considered harmful and should avoided all costs jackson should seen instantly and currently deprecated unfortunately some big publishers are ingesting such the latest releases the facebook api upgrading these 3rd party libs can accidentally upgrade you need communicate all our dependencies that they should avoid jackson entirely cowtowncoder avoid tarnishing the perceptions and trustworthiness your project being run codejockies you should pressure 3rd parties adopt jackson asap you can kill off this serious blunder that you need correct short order given compile time language dependencies imposed you almost well served fix the issue high minor release number here and running the and releases concurrently copy link knightweb commented feb 2016 derekm agree bad damaging experience avoided version forces use java and for many projects that not trivial upgrade for mine its just not possible copy link member author cowtowncoder commented feb 2016 derekm you are entitled your misguided and stupid opinion have plans marking deprecated feel free fuck off crumbpicker mentioned this issue mar 2016 weird bitmap field version faster xml jackson module scala 238 closed nlang mentioned this issue mar 2016 number field not exporting value with jackson ryantenney passkit open crumbpicker mentioned this issue mar 2016 possible problem with non empty rule for primitive values faster xml jackson module scala 244 closed pgomulka mentioned this issue jun 2016 default value ignored path variable api param default value long springfox springfox 1304 closed cowtowncoder mentioned this issue jul 2016 jackson serialization fix killbilling recurly java library 130 merged aniltoshniwal mentioned this issue sep 2016 jackson critical bug aws aws sdk java 846 closed copy link metai commented dec 2016 edited does good idea use integer instead int for our objects and then use non null for making our json because integer can get null and int just take get null anjaliguptaz mentioned this issue mar 2017 double value getting deserialized 1568 open sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.ser.std.NumberSerializers</file>
</fixedfiles>
</bug>
</bugrepository>
