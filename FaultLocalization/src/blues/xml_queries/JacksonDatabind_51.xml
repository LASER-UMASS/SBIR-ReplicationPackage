<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_51" link="https://github.com/FasterXML/jackson-databind/issues/1270">
<buginformation>
<summary>generic  type  returned  from  type  resolver  seems  ignored</summary>
<description>edited https github com benson basis jackson custom mess here the situation with jackson have type resolver that returns java type for generic type however something seems forgetting erasing the generic failing use the generic type param understand the type field the class all the information the test case not putting any code read here the issue the text was updated successfully but these errors were encountered copy link contributor author benson basis commented jun 2016 here the sort culprit type deserializer base even though returned carefully parameterized type this code reducing the non parameterized type else dec 2010 tatu since nominal type get here has generic type parameters actually now need explicitly narrow from base type which may have parameterization using raw type one complication though can not change type class simple type container otherwise may try narrow simple type object class into map type map class losing actual type process getting simple type map class which will not work expected base type null base type get class type get class aug 2015 tatu not sure the second part the check makes sense but appears check that java type impl class the same which important for some reason disabling the check will break enum related tests type ctxt get type factory construct specialized type base type type get raw class deser ctxt find contextual value deserializer type property copy link contributor author benson basis commented jun 2016 here workaround which certainly not fix this data and information proprietary and valuable trade secret basis technology corp given confidence basis technology and may only used permitted under the license agreement under which has been distributed and other way copyright 2015 basis technology corporation all rights reserved the technical data and information provided herein are provided with limited rights and the computer software provided herein provided with restricted rights those terms are defined dar and aspr 104 package import com fasterxml jackson annotation json type info import com fasterxml jackson databind deserialization config import com fasterxml jackson databind java type import com fasterxml jackson databind jsontype named type import com fasterxml jackson databind jsontype type deserializer import com fasterxml jackson databind jsontype type resolver import com fasterxml jackson databind jsontype impl array type deserializer import com fasterxml jackson databind jsontype impl external type deserializer import com fasterxml jackson databind jsontype impl property type deserializer import com fasterxml jackson databind jsontype impl wrapper type deserializer import com fasterxml jackson databind jsontype impl std type resolver builder import java util collection public class resolver builder extends std type resolver builder override public type deserializer build type deserializer deserialization config config java type base type collection named type subtypes type json type info none return null type resolver res resolver config base type subtypes false true first method for converting type info type switch include case wrapper array return new array type deserializer base type res type property type visible default impl case property case existing property per 528 same class property return new property type deserializer base type res type property type visible default impl include case wrapper object return new wrapper type deserializer base type res type property type visible default impl case external property null out the base type this might work around the problem return new external type deserializer null res type property type visible default impl throw new illegal state exception not know how construct standard type serializer for inclusion type include benson basis mentioned this issue jun 2016 external property never gets deserialized 1271 closed copy link member cowtowncoder commented jun 2016 would possible check this with there were small leftover issues type specialization code that could not fully resolved handling bit different not lot just bit with copy link contributor author benson basis commented jun 2016 sure either could change the version the repo one sec fri jun 2016 tatu saloranta notifications github com wrote would possible check this with there were small leftover issues type specialization code that could not fully resolved handling bit different not lot just bit with you are receiving this because you authored the thread reply this email directly view git hub 1270 comment mute the thread https github com notifications unsubscribe adm 9zy cof tcxc chiddhy dwks 4hgy copy link contributor author benson basis commented jun 2016 except that have see where json type resolver went fri jun 2016 benson margulies benson basistech com wrote sure either could change the version the repo one sec fri jun 2016 tatu saloranta notifications github com wrote would possible check this with there were small leftover issues type specialization code that could not fully resolved handling bit different not lot just bit with you are receiving this because you authored the thread reply this email directly view git hub 1270 comment mute the thread https github com notifications unsubscribe adm 9zy cof tcxc chiddhy dwks 4hgy copy link member cowtowncoder commented jun 2016 trying look into this was able reproduce failure with test project with current master snapshot copy link member cowtowncoder commented jun 2016 benson basis guessing that this does indeed get into the nasty party type specialization code generics are not part well known types maps collections use raw type declaration base could related but changing base does not solve the problem although does change the exception did you find that use external property required for the fail does just happen part failing case copy link contributor author benson basis commented jun 2016 didn try with non external the code posted above the change made was stop passing base the exernal type resolver but you think the same principle would apply the other cases uses the base out its way stomp the generic the comment external type resolver says something about enums failing doesn stomp null out the base type this might work around the problem return new external type deserializer null res type property type visible default impl copy link member cowtowncoder commented jun 2016 think this would probably apply other types too and come think thinking that generics probably will not work for the simple reason that type ids are for the class and not for generic variations generic variations can not detected runtime thanks java type erasure least not without custom handlers that default handling has benefit need still failure mode see odd not yet ready claim this working expected copy link member cowtowncoder commented jun 2016 think did find the specific culprit within type deserializer call type factory construct specialized type assumption made that since annotation based approach can only provide type erased raw type this passed your case type resolver can produce fully generic type and thus dropping that will drop appropriate parameterization have think how properly address this balancing specific fix simple enough would solve test with hope handle more generic case thinking that perhaps avoiding specialization call case given type has type parameters would reasonable match see how that works cowtowncoder modified the milestones jun 2016 cowtowncoder closed this 36631a jun 2016 copy link member cowtowncoder commented jun 2016 yes simple fix works for this case with that have slight nagging suspicion that there might theoretical problem with some combination things namely non custom annotation where subtype generic but since all unit tests pass think take chances for now and handle complications they arise sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase</file>
</fixedfiles>
</bug>
</bugrepository>
