<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="Lang_4" link="https://issues.apache.org/jira/browse/LANG-882">
<buginformation>
<summary>lookup translator  accepts char sequence  input  but  fails  work  with  implementations  other  than  string</summary>
<description>the  core  org  apache  commons  lang  text  translate  hashmap  charsequence  charsequence  lookupmap  from  the  javadoc  charsequence  emphasis  mine  this  interface  does  not  refine  the  general  contracts  the  equals  and  hashcode  methods  the  result  comparing  two  objects  that  implement  charsequence  therefore  general  undefined  each  object  may  implemented  different  class  and  there  guarantee  that  each  class  will  capable  testing  its  instances  for  equality  with  those  the  other  therefore  inappropriate  use  arbitrary  charsequence  instances  elements  set  keys  map  the  current  implementation  causes  code  such  the  following  not  work  expected  charsequence  charsequence  charbuffer  wrap  tochararray  system  out  println  stringescapeutils  escape  html  translate  system  out  println  stringescapeutils  escape  html  translate  which  gives  the  following  results  but  should  identical  the  problem  minimum  that  charbuffer  equals  even  documented  the  javadoc  that  char  buffer  not  equal  any  other  type  object  lookup  charbuffer  the  map  will  always  fail  when  compared  against  the  string  implementations  that  contains  obvious  work  around  instead  use  something  along  the  lines  either  the  following  system  out  println  stringescapeutils  escape  html  translate  tostring  system  out  println  stringescapeutils  escapehtml  tostring  which  forces  everything  back  string  however  this  not  practical  when  working  with  large  sets  data  which  would  require  significant  heap  allocations  and  garbage  collection  concerns  such  was  actually  trying  use  the  translate  method  that  outputs  writer  but  simplified  the  above  examples  omit  this  another  option  that  considering  use  custom  charsequence  wrapper  around  char  that  implements  hashcode  and  equals  work  with  those  implemented  string  however  this  will  interesting  due  the  symmetric  assumption  which  further  interesting  that  string  equals  currently  implemented  using  instanceof  even  though  string  final</description>
</buginformation>
<fixedfiles>
<file>org.apache.commons.lang3.text.translate.LookupTranslator</file>
</fixedfiles>
</bug>
</bugrepository>
