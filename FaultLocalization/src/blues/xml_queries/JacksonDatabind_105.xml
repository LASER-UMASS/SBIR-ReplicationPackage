<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_105" link="https://github.com/FasterXML/jackson-databind/issues/2197">
<buginformation>
<summary>illegal  reflective  access  operation  warning  when  using  value  type</summary>
<description>edited using jackson through spring rest template response entity void response get rest template exchange request url http method patch new http entity dto auth headers void class when void used indicate that the response entity has body the following warning appears the console warning illegal reflective access operation has occurred warning illegal reflective access com fasterxml jackson databind util class util file snip repository com fasterxml jackson core jackson databind jackson databind jar constructor java lang void warning please consider reporting this the maintainers com fasterxml jackson databind util class util warning use illegal access warn enable warnings further illegal reflective access operations warning all illegal access operations will denied future release the problem disappears string used generic type the text was updated successfully but these errors were encountered copy link ged marc commented dec 2018 this forms part faster xml jackson core 499 copy link author rkschamer commented dec 2018 alright close the issue then this was fast rkschamer closed this dec 2018 copy link member cowtowncoder commented dec 2018 probably also makes sense add explicit handling for nominal type void not much point introspecting pojo actually open this have look cowtowncoder reopened this dec 2018 cowtowncoder added active labels dec 2018 copy link ged marc commented dec 2018 edited hmm this also definitely justifies open modules until version java lang part the java base module but also strictly named currently order run these you have one two options because they are not never going opens java lang the java lang module you can append add opens java base java lang com fasterxml jackson databind which the strict module name and the mechanism for downwards exposure this has been simplified creating arguments file and executing that way this the strict jpms encapsulation and where all the performance boosts come from this one like currently and explain how works and doesn destroy the module pathing after open module com mypackage myapp this does few things but only going highlight the features the java base module now com mypackage myapp and your classes and libraries have been placed the parent parent module layer changes between jre and jpms will felt long your libraries are named automatic unnamed classpath mode the module pathing disabled java lang java xml etc etc well all your packages are opened and exported default allowing private field and class handlers like annotations databind its thing without explicit definitions the module pathing still adhered and any other named libraries except yours because now java base will still strictly enforced ged marc added commit ged marc oss parent that referenced this issue dec 2018 export all packages across modules 63fd enforce jdk for annotations and data binding clean the module pathing oss parent update for plugin management exclude moditect from plugin version check faster xml jackson annotations 145 faster xml jackson core 499 faster xml jackson databind 2197 ged marc mentioned this issue dec 2018 jpms strictly named modules faster xml oss parent closed cowtowncoder changed the title illegal reflective access operation warning when using java lang void illegal reflective access operation warning when using java lang void value type dec 2018 copy link member cowtowncoder commented dec 2018 orthogonal thing added handling for void special type avoid handling type pojo this should prevent warning there are already handlers for always read write asnull happens not much additional work cowtowncoder closed this 69903ae dec 2018 friedrich mentioned this issue aug 2019 fix issue with empty json object responses from network policy endpoints cloudfoundry java client 990 merged cowtowncoder removed the active label sep 2019 sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.deser.std.JdkDeserializers</file>
</fixedfiles>
</bug>
</bugrepository>
