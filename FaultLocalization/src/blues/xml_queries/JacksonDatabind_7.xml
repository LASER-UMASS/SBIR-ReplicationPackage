<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_7" link="https://github.com/FasterXML/jackson-databind/issues/592">
<buginformation>
<summary>possibly  wrong  delegate  deserialization  using</summary>
<description>class value json creator public static value from token buffer buffer given json string null expected that while deserializing using delegate buffer current token will start object and rest the tokens will available buffer start object field name value number int field name value null end object but buffers ends being started with field name and then contains single attribute value field name value number int due how token buffer copy current structure works when have current token field name rather than start object because forced move next token bean deserializer java 120 hope this helps nail down intended behavior regression bug the text was updated successfully but these errors were encountered copy link member cowtowncoder commented oct 2014 intended behavior this point that deserializers that handle json objects need accept both the case where current token field name and where start object this not ideal but required support more efficient handling the common case for polymorphic types which first value pair contains type and addition leading would require merging additional stream this not ideal state things and cases where content reconstructed would better reconstruct the whole value also since token buffer could contain any json value this bit gray area however all relevant values should contained missing null pair also you point out due the way copy current structure works this won behave properly think handling not intended there bug somewhere not sure which parts need changed but with given example case should possible figure out proper handling here copy link author elucash commented oct 2014 thank you for the explanation solved somewhat similar problems generated marshalers always require that marshaler expects current token the first token precondition and leaves parser last token post condition and with some temporary copying buffer for polymorphic deserialization but definitely not trivial having lot different deserializers workaround for usecase replaced token buffer with map string token buffer collect all needed tokens json creator method copy link member cowtowncoder commented oct 2014 right originally expectation was what one would expect start object and the complexity was introduced support polymorphic type handling and parts weren discovered until some time later but given that map works token buffer definitely should work well there bug fix hope figure out fix token buffer the most efficient intermediate form and your use case would sort canonical use when converting values cowtowncoder added this the milestone oct 2014 cowtowncoder closed this bcccd oct 2014 copy link member cowtowncoder commented oct 2014 elucash thank you again for reporting this surprising hadn been noticed before copy link author elucash commented oct 2014 thank you cowtowncoder for the quick fix elucash mentioned this issue dec 2014 fails deserialize json object immutables immutables closed sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.util.TokenBuffer</file>
</fixedfiles>
</bug>
</bugrepository>
