<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonCore_7" link="https://github.com/FasterXML/jackson-core/issues/177">
<buginformation>
<summary>add  check  won  work  expected</summary>
<description>looks like calling write string and perhaps other scalar write methods results writing invalid output instead throwing exception should instead fail future may want consider allowing this alias but any rate should not produce invalid output the text was updated successfully but these errors were encountered cowtowncoder added commit that referenced this issue jan 2015 add test for 177 0844691 cowtowncoder added this the milestone jan 2015 cowtowncoder closed this 5cddffa jan 2015 copy link knightweb commented dec 2015 can you give some more background around why this change was required for example what kind object structures cause invalid json produced prior this fix its causing object unserialisable whereas previous versions jackson api where fine thought minor version should backward compatible happy debug code but need some background what kinds structures cause this kind failure the error get when serialising caused com fasterxml jackson core json generation exception can not write field name expecting value com fasterxml jackson core json generator report error json generator java 1644 com fasterxml jackson core json writer based json generator write field name writer based json generator java 120 com fasterxml jackson databind ser bean property writer serialize field bean property writer java 654 com fasterxml jackson databind ser std bean serializer base serialize fields bean serializer base java 678 com fasterxml jackson databind ser bean serializer serialize bean serializer java 156 com fasterxml jackson databind ser impl indexed list serializer serialize contents indexed list serializer java 119 com fasterxml jackson databind ser impl indexed list serializer serialize indexed list serializer java com fasterxml jackson databind ser impl indexed list serializer serialize indexed list serializer java com fasterxml jackson databind ser bean property writer serialize field bean property writer java 656 com fasterxml jackson databind ser std bean serializer base serialize fields bean serializer base java 678 com fasterxml jackson databind ser bean serializer serialize bean serializer java 156 com fasterxml jackson databind ser bean property writer serialize field bean property writer java 656 com fasterxml jackson databind ser std bean serializer base serialize fields bean serializer base java 678 com fasterxml jackson databind ser std bean serializer base serialize with type bean serializer base java 564 com fasterxml jackson databind ser impl type wrapped serializer serialize type wrapped serializer java com fasterxml jackson databind ser default serializer provider serialize value default serializer provider java 130 com fasterxml jackson databind object mapper config and write value object mapper java 3525 com fasterxml jackson databind object mapper write value string object mapper java 2915 copy link member author cowtowncoder commented dec 2015 knightweb logically property name field name different from value string even they are expressed with the same physical token json the intent was never allow these interchangeably and bug fixes observed behavior are not included change behavior limitation one could argue that the original model could have considered both strings string string way but separation useful avoid other problem cases such trying write non string property name key something json does not allow checks can also catch invalid usage where output sequences either happen work correctly accidentally worse report error but produce invalid json output unfortunate that the check did not exist earlier that would have prevented regression problems like the one you have the underlying problem here bit difficult say without seeing code possibilities include not calling start object before trying write field name although that would likely have produced invalid json anyway writing two field names row which also would seem problematic but does seem odd more commonly see reverse cases where field name was expected string value written actually come think that assume there has one use custom serializer somewhere before code gets back default pojo handler use non json data format which case there may some translation specifically xml backend has some nasty work arounds for massaging event sequences since should not possible get such error only using standard serializers course possible would really like repeatable test case fix copy link knightweb commented dec 2015 thanks for the quick response there are customer serializers but not something can change they are provided api from another internal team try and get isolated example together help understand what might wrong with those serializers least then can advise the team responsible they however work fine jackson version suspect the serializer causing the issue let know you see anything obviously wrong public class attributes serializer extends json serializer list attribute override public void serialize list attribute attributes json generator jgen serializer provider provider throws exception attributes empty return map string string attributes map new linked hash map string string for attribute attribute attributes attributes map put attribute get name attribute get value jgen write object attributes map override public boolean empty list attribute value value null value empty return true return false copy link member author cowtowncoder commented dec 2015 think the problem attributes empty return since not legal simply refuse serialize something point where call made write call valid value token structure array object must made this because exclusion handled parent level due historical reasons bit more this below now exclusion value may work array and root contexts but object context the issue that the property name has already been written and value expected there way undo property name write would guess that the non exception throwing behavior did not necessarily produce output one would expect just did not throw exception was rewriting generator api from scratch might choose logic where the property name was always buffered only written value was written this would allow for simpler exclusion filtering serializer but this point the behavior what and unfortunately can not changed copy link knightweb commented dec 2015 thanks for the pointer isolate the code down workable sized example and recreate then modify write empty null map object before returning see works then compare the two different json outputs under version and they are equivalent can recommed the team change the behavoiur the have other flags that exclude the inclusion null properties this may still produce the same json output worth shot copy link member author cowtowncoder commented dec 2015 knightweb thanks copy link knightweb commented dec 2015 cowtowncoder thanks for the suggestion writing empty list solves the serialization problem had with agree was bug with companies code which previous versions allowed get away with done some comparing the outputs produced applying that fix and unfortunately they are not equal between version and would appear that version longer supports non empty for properties with custom serialisers although this not major issue blocker upgrading would increase our payload size and also serve clutter the json output this something that could consider for patch added some code below that shows the issue apologies for the large class but does run and demonstrate the issue package com testcomp import java exception import java util array list import java util linked hash map import java util list import java util map import com fasterxml jackson annotation json include import com fasterxml jackson annotation json include include import com fasterxml jackson core json generator import com fasterxml jackson databind json serializer import com fasterxml jackson databind object mapper import com fasterxml jackson databind serializer provider import com fasterxml jackson databind annotation json serialize public class custom serialisation issue public custom serialisation issue json serialize using attributes serializer class json include include non empty private list attribute attributes new array list attribute private list attribute attributes non custom serialised new array list attribute private string test public list attribute get attributes non custom serialised return attributes non custom serialised public void set attributes non custom serialised list attribute attributes non custom serialised this attributes non custom serialised attributes non custom serialised public list attribute get attributes return attributes public void set attributes list attribute attributes this attributes attributes public void add attribute attribute attribute attributes add attribute public string get test return test public void set test string test this test test private static class attribute public attribute private string name private string value public string get name return name public void set name string name this name name public string get value return value public void set value string value this value value private static class attributes serializer extends json serializer list attribute override public void serialize list attribute attributes json generator jgen serializer provider provider throws exception attributes empty this line fixes the serialization failure however its not needed oddly even when included version doesn change the output that would suggest another change causing null and empty properties serialise when using custom serialization jgen write object new array list attribute return map string string attributes map new linked hash map string string for attribute attribute attributes attributes map put attribute get name attribute get value jgen write object attributes map override public boolean empty list attribute value value null value empty return true return false public static void main string args throws exception object mapper mapper new object mapper mapper set serialization inclusion include non empty custom serialisation issue csi new custom serialisation issue csi set test 123 attribute new attribute set name one set value have attributes prior they will not list the serialised json this desirable from payload size and readability does this perhaps only affect custom serialisation csi add attribute string mapper write value string csi system out println sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.core.json.JsonWriteContext</file>
</fixedfiles>
</bug>
</bugrepository>
