<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="Mockito_20" link="https://github.com/mockito/mockito/issues/92">
<buginformation>
<summary>allow  convenient  spying  abstract  classes</summary>
<description>posted this google code and was asked submit github mockito easy use when the test needs provide canned values for certain method but gets harder when canned value isn sufficient example fake with trivial logic interface user account list string get emails void add email string email other methods when mocking such domain entity object tedious manually program get emails add email with when then return and make sure the two methods are logically consistent that get emails returns all emails added example callback style api interface account service void get account string async callback user account callback stubbing account service isn easy require use answer and the answer api isn statically type safe when service get account any async callback class then answer new answer void async callback user account callback async callback user account get arguments example uninteresting parameters interface account rpc service future account get account rpc context context string none the tests care about the context object uninteresting parameter imposed the framework account rpc service were directly mocked all tests would have use repetitively mention this uninteresting parameter like this when service get account rpc context class then return and all other parameters are required wrapped proposal propose adding support for abstract classes mockito make easier deal with tests like above for example abstract class fake user account implements user account private final list string emails new array list override public void add email string email emails add email override list string get emails return immutable list copy emails fake private fake user account user account mockito instantiates abstract class for example abstract class mock account service implements account service override public void get account string async callback user account callback callback success get account abstract user account get account string fake private mock account service service when service get account then return account for example abstract class mock account rpc service implements account rpc service override future account get account rpc context context string check not null context common sanity test don have repeat tests return get account abstract future account get account string fake private mock account rpc service service when service get account then return work place internally implemented default answer support abstract classes found that the support abstract classes helps avoid overusing mocks when should using fakes and situations like above get cleaner test code but because not integrated the core mockito there are gotchas with our implementation like you can have private final methods your fake the idea sounds okay give try volunteer submit patch thanks the text was updated successfully but these errors were encountered copy link contributor author fluentfuture commented sep 2014 also brice suggested that there have been some concerns about supporting partial mocks because could bring another way test design stuff the wrong way suppose the worry mostly about not extracting collaborators into separate interfaces but rather clinging them abstract methods resulting the class doing too much the template method pattern few reasons don think that concern out weighs the benefits one can already crude partial mock declaring the not mocked methods final such that only the abstract methods are mocked mockito good idea regardless testing anyway avoid too many choices when subclassing from experience workplace rare that people would adopt the template method pattern inappropriately only because they have the partial mock support quite contrary what see happen more often the abuse mocks that one should not have used mocks all fake would have made the test more readable maintainable example above user account value type object should have used fake main reason why people tend abuse mockito easy mock appears the inconvenience implementing fakes compared how ridiculously easy use mocks example above implementing fake user account would require implementing all methods even when the test only cares about two them adding support for fake makes easier create fakes people have less temptation make mistakes imho template method pattern has its place can imagine charged test jdk abstract list probably want use partial mock that can verify whether how many times the get int user code called into when iterator next called hopefully that helps clarify the intent this proposal copy link member mockitoguy commented oct 2014 hey fluentfuture the use cases you described make perfect sense basically you propose that mockito should offer api create partial mocks classes without providing class instance for example overloaded version spy method that takes class mock parameter instead taking instance object think this very good idea and should have mockito can you tell use what api change you have mind and yes would love get brice thoughts cheers tuesday september 2014 fluentfuture notifications github com wrote also brice suggested that there have been some concerns about supporting partial mocks because could bring another way test design stuff the wrong way suppose the worry mostly about not extracting collaborators into separate interfaces but rather clinging them abstract methods resulting the class doing too much the template method pattern few reasons don think that concern out weighs the benefits one can already crude partial mock declaring the not mocked methods final such that only the abstract methods are mocked mockito good idea regardless testing anyway avoid too many choices when subclassing from experience workplace rare that people would adopt the template method pattern inappropriately only because they have the partial mock support quite contrary what see happen more often the abuse mocks that one should not have used mocks all fake would have made the test more readable maintainable for example example user account value type object should have used fake main reason why people tend abuse mockito easy mock the inconvenience implementing fakes compared how ridiculously easy use mocks example above implementing fake user account would require implementing all methods even when the test only cares about two them adding support for fake makes easier create fakes imho template method pattern has its place can imagine charged test jdk abstract list probably want use partial mock that can verify whether how many times the get int user code called into when iterator next called hopefully that helps clarify the intent this proposal reply this email directly view git hub comment szczepan faber core dev gradle founder mockito copy link contributor bric commented oct 2014 just info this comes from the following issue 242 also not strongly opinionated this however partial mocks have always been concern yet spies can stubbed this being developed which have been made previous issue issue 242 the documentation should explain how this could used and the eventual danger one chose the wrong way and other topics where attention must put the fake annotation collides with test doubles terminology there are dummy fakes stubs mocks may wanted fakes have precise definition not sure partial mocks with method template such the use cases proposed here fits for partial mock would tend report error when one attempt stub defined method but not sure about this technical point view there are challenges instantiate the partial mock objenesis not option there calling the constructor may the most safe option but raises other choices make what the constructor needs parameters the best choice the right now only support parameterless constructor constructor requires types maybe use the constructor injection already existing the engine not perfect yet maybe easily configurable only perform constructor injection that being said don think bad idea concerns that need addressed postponed copy link contributor author fluentfuture commented oct 2014 thanks for the thoughts szczepan and brice answer brice concern and szczepan question together fake partial mock think even though can viewed and used partial mock allow poorly designed class mocked not the point have some bad class can already partial mock simply making the methods don want mock final class bad template class final void thing thing get the other thing abstract thing get the other thing mock private bad template class bad when bad get the other thing then return thing that say not adding the proposed support doesn much prevent this kind bad design although not telling people that they could use mockito this way may help but then comes point naming fake because the real intent from users perspective put another way how want perceived and used users you can create fakes with fake differs from mocks that can have its own state and behavior the fake user account example report error misuse sounds reasonable not clear how easy implement mockito from experience using our internal implementation hasn become real issue that people mistakenly call when foo not mocked method fact doesn mockito already report error for such case sees when call but mockable invocation precedes instantiation think definitely need the constructor invoked otherwise the fake would uninitialized state the fake user account example the final emails field would null what then the class has constructor parameters what the fake needs use other mock objects use example demo how use internally abstract class player player buddy buddy public class foo test mock private buddy buddy fake private fake player player abstract class fake player extends player fake player super buddy when inject fake fields into the test object have the enclosing test instance the class non static inner class foo test pass the foo test instance fake player constructor this actually allows create fakes that can access any arbitrary state managed the test there are also uncommon cases where not hope invoke the constructor for example class with too many dependencies and none are needed for the purpose the current test for that just mark the constructor private because cglib cannot invoke private constructors constructor skipped such case copy link member mockitoguy commented oct 2014 hey guys agree cglib not viable for this scenario could introduce new methods mock foo class with settings spy constructor args spy foo class object constructor args delegates method are there compelling reasons for introducing another annotation type could create instance spy the user have not provided instance thoughts copy link contributor author fluentfuture commented oct 2014 szczepan did you mean say objenesis not viable regarding the mock spy call haven found that users need that level power flexibility the cost sacrificing static type safety and the api looking reflective could used other framework ish code but such utility isn for everyday testing what found far with the support non static inner class and the framework injecting the this enclosing instance automatically already solves the arbitrary constructor parameter problem and the code completely static type safe suggestion support non static inner class but not arbitrary constructor parameters either foo foo spy foo class use annotation spy private foo foo mockito annotations init mocks this inner classes are only created with the annotation and init mocks copy link contributor author fluentfuture commented oct 2014 while implementing realized that there already spy field injection when the user doesn provide instance http docs mockito googlecode com org mockito spy html can reuse spy unless are willing break existing users does any partial partial mock mock abstract fake sound okay add copy link member mockitoguy commented oct 2014 can reuse spy https github com spy unless are willing break existing users why would break existing users feel free work the java api first can deal with annotation later cheers sun oct 2014 fluentfuture notifications github com wrote while implementing realized that there already spy https github com spy field injection when the user doesn provide instance http docs mockito googlecode com org mockito spy html can reuse spy https github com spy unless are willing break existing users does any partial https github com partial partial mock fake https github com fake sound okay add reply this email directly view git hub comment szczepan faber core dev gradle founder mockito mockitoguy changed the title support fakes with abstract classes allow convenient spying abstract classes nov 2014 mockitoguy added commit that referenced this issue nov 2014 basic support for creating mocks using constructor 7886e issue mockitoguy closed this 0163863 nov 2014 mockitoguy added commit that referenced this issue nov 2014 rename job for consistency 31fb issue mockitoguy added commit that referenced this issue nov 2014 added documentation and new convenience api top level mockito class 72501 issue mockitoguy added commit that referenced this issue nov 2014 polished javadocs 464d issue mockitoguy added commit that referenced this issue nov 2014 improved exception messages 1ba 7cea issue mockitoguy added commit that referenced this issue nov 2014 improved exception messages 24bdec issue mockitoguy added commit that referenced this issue nov 2014 documented current behavior via test 323fa issue mockitoguy added commit that referenced this issue nov 2014 improved exception messages 03a 47f issue mockitoguy added commit that referenced this issue nov 2014 fixed problem with type testing outer classes 8912aa issue mockitoguy added commit that referenced this issue nov 2014 added tags and incubating loading status checks 03b issue bric added commit bric mockito that referenced this issue feb 2015 adds support for issue mockito with byte buddy 2bc see commit 7886e bric added commit bric mockito that referenced this issue feb 2015 adds support for issue mockito with byte buddy see commit 7886e bric added commit bric mockito that referenced this issue feb 2015 adds support for issue mockito with byte buddy 7616cd see commit 7886e neworld pushed commit neworld mockito that referenced this issue aug 2019 merge pull request mockito from nhaarman create array instance 6ee 75f use the java class name create array instance sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker</file>
</fixedfiles>
</bug>
</bugrepository>
