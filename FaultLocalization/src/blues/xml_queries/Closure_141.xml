<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="Closure_141" link="https://storage.googleapis.com/google-code-archive/v2/code.google.com/closure-compiler/issues/issue-116.json">
<buginformation>
<summary>the  side  effects  function  function  are  not  calculated</summary>
<description>what  steps  will  reproduce  the  problem  compile  math  sin  math  cos  what  the  expected  output  what  you  see  instead  empty  output  what  version  the  product  are  you  using  what  operating  system  the  closure  compiler  web  service  114  please  provide  any  additional  information  below  result  this  issue  goog  now  considered  have  side  effects  can  hard  code  this  idiom  and  recognize  however  general  side  effect  propagation  bit  harder  nick  wonder  can  incorporate  sideeffect  into  the  type  system  have  side  effectfx  free  function  subclass  function  then  can  type  math  sin  math  cos  side  effect  free  this  where  helps  have  copy  the  dragon  book  your  desk  this  classic  synthesized  attribute  simple  matter  figuring  out  the  rules  the  attribute  grammar  and  coding  the  type  inference  engine  visits  cfg  nodes  this  way  most type inference  java  just  synthesizing  type  attributes  from  child  nodes  need  similar  albeit  simpler  inference  engine  for  side  effects  don  think  actually  want  make  this  part  the  type  system  though  the  type  lattice  doesn  follow  the  same  rules  the  side  effect  lattice  particular  side  effect  causing  function  may  subtype  non  side  effect  causing  function  and  vice  versa  gets  even  messier  when  your  try  take  least  common  supertype  side  effect  function  and  non  side  effect  function  synthesized  attribute  gets  this  case  but  thinking  value  propagation  like  var  math  sin  math  cos  var  foo side effect func  think  the  cartesian  product  sub  lattice  all  functions  and  another  lattice  side  effects  classification  should  form  another  lattice  well  but  you  are  right  that  messy  feel  are  not  fully  utilizing  the  power  our  type  inference  system  can  give  lot  more  solution  besides  jsdoc  types  instead  mixing  new  types  the  doc  types  wonder  can  extend  can  take  custom  type  systems  like  the  function  side  effect  type  system  lattice  thoughts  andrew  ran  into  this  problem  when  was  writing  type  tightening  specifically  you  want  analysis  very  similar  type  inference  but  you  want  over  different  type  lattice  think  just  gave  trying  parameterize type inference  and  wrote  one  off  inference  engine tighten types  would  helpful  ask  him  why  and  whether  good  idea  write  separate  type  inference  engine  for  attributes  like  this  let  take  that  discussion  off  the  bug  entry  and  onto  the  public  mailing  list  think  there  are  two  bugs  math  sin  math  cos  the  call  above  not  name  getprop  expression  the  definition  finder  doesn  handle  aliases  which  what  makes  unable  find  the  definition  goog  now  which  alias  date  now  addition  reference  anonymous  function  the  first  fairly  easy  fix  when  encounter  call  and  what  are  calling  hook  expression  consider  the  side  effects  the  left  and  right  function  names  the  second  requires  keeping  track  aliases  and  expanding  them  compute  the  set  possible  functions  take  stab  the  first  issue  soon  the  later  will  have  wait  until  have  more  time  unless  someone  else  wants  pick  this  issue  was  closed  revision  154</description>
</buginformation>
<fixedfiles>
<file>com.google.javascript.jscomp.NodeUtil</file>
<file>com.google.javascript.jscomp.PureFunctionIdentifier</file>
</fixedfiles>
</bug>
</bugrepository>
