<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="JacksonDatabind_106" link="https://github.com/FasterXML/jackson-databind/issues/2189">
<buginformation>
<summary>does  not  check  int  bounds</summary>
<description>similar 1729 tree traversing parser does not perform bounds checks some json values bound ints using jackson version here are several comparisons generated with the following code public static class int class public int override public string string return string value object mapper mapper new object mapper void read and print string example string from tree try json node tree mapper read tree example from tree mapper reader for int class class read value tree string catch exception from tree get class get simple name string from string try from string mapper reader for int class class read value example string catch exception from string get class get simple name system out printf 30s 30s 30s example from tree from string test public void compare from tree system out printf 30s 30s 30s json input read from tree read from string system out println read and print etc json input read from tree read from string 10000 10000 2147483647 json mapping exception 2147483648 2147483648 json mapping exception 2147483649 2147483647 json mapping exception 2147483649 2147483647 json mapping exception 4294967295 json mapping exception 9999999999999999 true mismatched input exception mismatched input exception mismatched input exception mismatched input exception mismatched input exception mismatched input exception mismatched input exception mismatched input exception invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception 2147483648 invalid format exception invalid format exception 2147483649 invalid format exception invalid format exception 2147483649 invalid format exception invalid format exception 4294967295 invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception 9999999999999999 invalid format exception invalid format exception true invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception invalid format exception without digging further into the code appears the json value numeric tree traversing parser silently overflows maybe this expected behavior but the inconsistency between reading from non tree reader string file etc versus directly from tree seems like bug the very least makes less convenient manipulations json document before binding would expect exception thrown for the all but the first three examples above but understand there are use cases for coercing values even would expect the coercion logic consistent between the parsers clearly documented otherwise consistent between quoted and unquoted values also curious about the expected behavior when converting non integral values why true mismatched input but converted similarly why are and acceptable but not when quotes even though and other quote integers are acceptable thanks for all your hard work this hope this issue doesn come off condescending for our specific use case read the value tree validating against schema then using jackson bind the tree object while true that can specify type minimum and maximum values the schema prone mistakes and there not necessarily reason tie the schema the language implementation provided things like overflow consistently result exception thus trying better understand the expectations and limits jackson has when using the tree parser the text was updated successfully but these errors were encountered copy link member cowtowncoder commented nov 2018 thank you for reporting this valuable and did not think condescending all this area quite complicated partly due conflicting expectations and wishes users partly due parallel implementations and starting with overflow yes think bounds checks should work similarly and throw exception think stream based parsers can should act the initial expected behavior baseline coercions similarly should similar ideally identical and general think tree traversing parser should least try apply checks that token buffer does the two are used similar way for buffering conversions rules for coercions get trickier and wish there was good overall answer but try offer some perspective likely reasons implemented things that way first coercion from integral values booleans were allowed for interoperability back the day perl did not have true and false map but not clear that values outside say and should coerce they now but coercion from true false number seems iffy coercions across integral floating point something where different users have different preferences think int float less controversial and less problematic too the other direction for debate there are some settings deserialization features used for more less strict coercions but support limited and probably not applied everywhere now string number that also bit controversial general and particular difference from floating point string int thinking that this part coercion and although not necessarily consistent seems like limiting could reasonable either coerce from floating point from string but not both but think one those cases that grew over time not necessarily designed system well obviously having said that would interested solid improvements one piece aspect time main limitations here think backwards compatibility can make only limited changes patch releases but there will which allows bit more room for changes for example bounds checks should but not patch just because risk for patches bigger try keep changes behavior minimum allow blind upgrade patch versions and then there work for master which can actually solve most issues this why dividing improvements into separate issues may help think this issue works then for int long bounds checks and other aspects can covered new issues cowtowncoder added active labels nov 2018 copy link member cowtowncoder commented nov 2018 one more thing reference token buffer was just note myself too that similar issues probably affect mapper convert value which uses buffer generator first then parser copy link author saites commented nov 2018 thanks for your reply understand how projects like these grow over time and since you supporting public api certainly get that you want keep compatibility breaking changes minimum happy hear not totally misunderstanding the library use but way bit sad that won have super quick simple fix specific problem for now recommend team use stricter schemas and convert json nodes back strings before unmarshaling even though less efficient that should ensure processing what expect though some the schema work will require diligence and more careful testing think this issue works then for int long bounds checks and other aspects can covered new issues makes sense use this issue for tracking bounds checks presumably for and track other changes elsewhere reasonable for the various implementations use common base not super familiar with the code hope not too confused guessing the split between streaming non streaming encoders decoders expect possible put both common underlying representation and perform coercions bounds checks there what might nice modular checks coercions that can swapped out for more less strict checking desired but this might less reasonable from efficiency standpoint which what assume the basis for the split the first place what you think the best way forward for what kind help you need get there copy link member cowtowncoder commented jan 2019 quick note actually working this now add tests first for tree traversing parser then fixing per earlier notes methods json node like int value will probably only bounds check with but tree traversing parser need not wait that cowtowncoder changed the title tree traversing parser does not check int bounds tree traversing parser does not check int bounds jan 2019 cowtowncoder removed the active label jan 2019 cowtowncoder added this the milestone jan 2019 cowtowncoder added commit that referenced this issue jan 2019 fix 2189 loading status checks 6ef 8665 copy link member cowtowncoder commented jan 2019 did add bounds checks for int and long access for tree traversing parser and matching tests that part should now more consistent other questions wrt coercions are valid and might good file new issue plan tackling some aspects regardless but think main concern has with configurability aspects followed documentation implementation should not difficult once configurability for specific desired undesired coercions defined cowtowncoder closed this jan 2019 sign for free join this conversation git hub already have account sign comment assignees one assigned labels none yet projects none yet milestone linked pull requests successfully merging pull request may close this issue none yet participants</description>
</buginformation>
<fixedfiles>
<file>com.fasterxml.jackson.databind.node.TreeTraversingParser</file>
</fixedfiles>
</bug>
</bugrepository>
