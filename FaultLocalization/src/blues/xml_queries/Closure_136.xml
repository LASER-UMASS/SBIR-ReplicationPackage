<?xml version="1.0" encoding="ISO-8859-1"?>
<bugrepository name="Defects4J">
<bug id="Closure_136" link="https://storage.googleapis.com/google-code-archive/v2/code.google.com/closure-compiler/issues/issue-103.json">
<buginformation>
<summary>super  replaced  when  should  not  replaced</summary>
<description>what  steps  will  reproduce  the  problem  have  javascript  using  prototype  super  compile  with  advanced  optimizations  see  that  super  replaced  for  example  super  what  the  expected  output  what  you  see  instead  super  should  not  renamed  used  prototype  what  version  the  product  are  you  using  what  operating  system  latest  from  svn  please  provide  any  additional  information  below  personally  made  quick  fix make declared names unique  java  line get compiler get coding convention  exported  name  continue  this  fixed  for  but  not  sure  that  the  right  place  method  solve  this  unfamiliar  with  the  project  quick  question  are  you  building  from  the  command  line  using  closure  compiler  programmatically  what  does  your  command  line  the  compiler  look  like  comment  deleted  building  from  the  command  line  here  what  the  command  looks  like  java  jar  users  jochen  closure  build  compiler  jar  compilation  level  advanced  optimizations  share  module  share  main  module  main  recording  module  recording  comments  form  module  commentsform  facebook  share  module  facebookshare  externs  prototype  module  output  path  prefix  users  jochen  ruby  karaoke  public  javascripts  compiled  that  looks  like  the  right  fix  want  add  test  case  and  submit  the  change  the  project  hint  the  tests  run  the  google  coding  convention  leading  underbar  the  sign  exported  name  what  the  effect  the  change  super  needs  unique  during  the  name  normalization  this  would  break  inlining  right  how  does  super  work  again  wouldn  impossible  inline  the  function  anyway  because  uses  crazy  reflection  feel  uncomfortable  with  breaking  the  normalization  for  this  would  prefer  special  case  the  renaming  look  for  super  and  change  this  back  super  since  are  already  special  casing  there  prevent  from  being  renamed  the  first  place  were  inlined  would  become  currently  something  like  compiler  inline  super  would  broken  regardless  the  normalization  would  assume  this  doesn  happen  but  someone  should  check  the  first  parameter  method  class  object  super  prototype  code  for  setting  the  class add method  inserts  reference  the  superclass  here  the  relevant  code  class  methods add methods  function  source  var  ancestor  this  superclass  this  superclass  prototype  var  properties  object  keys  source  for  var  length  properties  length  length  var  property  properties  value  source  property  ancestor  object  function  value  value argument names  first  super  alan  added  change  november  avoid  renaming  super  marking  exported  symbol  the default coding convention  correctly  compile  prototype  code  advanced  mode  need  make  sure  the  setup  code  for  the  class  correctly  does  the  parameter  substitution  see  http  www  prototypejs  org  assets  2008  prototype  http  www  prototypejs  org  api  class  create  make  comment  clear  one  the  points  the  normalization  make  easier  for  passes  the  they  saw  the  same  they  saw  earlier  without  needing  track  scope  this  makes  things  much  easier  for  code  motion  because  you  don  need  worry  about  masking  variable  the  same  name  you  change  super  not  unique  the  results  would  unpredictable  after  renaming  doesn  matter  the  name  unique  the  normalization  expected  renaming  design  creates  many  non  unique  names  possible  this  issue  was  closed  revision  139</description>
</buginformation>
<fixedfiles>
<file>com.google.javascript.jscomp.MethodCompilerPass</file>
<file>com.google.javascript.jscomp.RenameVars</file>
</fixedfiles>
</bug>
</bugrepository>
