--- /arja/Defects/gson/gson_7_buggy/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ /arja/patches_vqkc/Patch_622/patched/arja/Defects/gson/gson_7_buggy/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -962,8 +962,17 @@
         // Fall back to parse as a double below.
       }
     } else {
-      throw new IllegalStateException("Expected a long but was " + peek()
-          + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());
+      if (p == PEEKED_NUMBER) {
+		peekedString = new String(buffer, pos, peekedNumberLength);
+		pos += peekedNumberLength;
+	} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
+		peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"');
+	} else if (p == PEEKED_UNQUOTED) {
+		peekedString = nextUnquotedValue();
+	} else if (p != PEEKED_BUFFERED) {
+		throw new IllegalStateException("Expected a double but was " + peek() + " at line " + getLineNumber()
+				+ " column " + getColumnNumber() + " path " + getPath());
+	}
     }
 
     peeked = PEEKED_BUFFERED;
@@ -1179,20 +1188,17 @@
     if (p == PEEKED_NUMBER) {
       peekedString = new String(buffer, pos, peekedNumberLength);
       pos += peekedNumberLength;
-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
-        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"');
-      try {
-        result = Integer.parseInt(peekedString);
-        peeked = PEEKED_NONE;
-        pathIndices[stackSize - 1]++;
-        return result;
-      } catch (NumberFormatException ignored) {
-        // Fall back to parse as a double below.
-      }
-    } else {
-      throw new IllegalStateException("Expected an int but was " + peek()
-          + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());
-    }
+    } else if (p == PEEKED_NUMBER) {
+		peekedString = new String(buffer, pos, peekedNumberLength);
+		pos += peekedNumberLength;
+	} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
+		peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"');
+	} else if (p == PEEKED_UNQUOTED) {
+		peekedString = nextUnquotedValue();
+	} else if (p != PEEKED_BUFFERED) {
+		throw new IllegalStateException("Expected a double but was " + peek() + " at line " + getLineNumber()
+				+ " column " + getColumnNumber() + " path " + getPath());
+	}
 
     peeked = PEEKED_BUFFERED;
     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.


