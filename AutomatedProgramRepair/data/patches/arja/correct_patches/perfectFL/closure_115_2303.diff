--- /arja/Defects/closure/closure_115_buggy/src/com/google/javascript/jscomp/FunctionInjector.java
+++ /arja/patches_rgcc/Patch_2303/patched/arja/Defects/closure/closure_115_buggy/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -696,10 +696,8 @@
 
     boolean hasSideEffects = false;
     if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
       Node stmt = block.getFirstChild();
       if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
       }
     }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
@@ -727,9 +725,6 @@
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.


